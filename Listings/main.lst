C51 COMPILER V9.59.0.0   MAIN                                                              12/07/2018 00:57:42 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND P
                    -RINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <REG52.H>
   2          #include <stdio.h>
   3          #include <string.h>
   4          /*------------------------------------------------
   5          The following string is the stuff we're gonna
   6          send into the serial port.
   7          ------------------------------------------------*/
   8          unsigned char xdata serial_input_buffer [] =
   9          "This is a test to see if this data gets "
  10          "injected into the serial port.\r\n"
  11          "Have fun.\r\n"
  12          "\r\n\r\n";
  13          
  14          /*---------------------------------------------------------
  15          Timer 1 Overflow Interrupt
  16          ---------------------------------------------------------*/
  17          unsigned int T1_ISR_count = 0;
  18          void T1_ISR(void) interrupt 3 { 
  19   1        T1_ISR_count++;
  20   1        TF1 = 0; // Reset the interrupt request
  21   1      }
  22          
  23          int key_i=0;
  24          
  25          // Testing by use of word ".tie5Ronal"
  26          //char key[11] = {'.', 't', 'i', 'e', '5', 'R', 'o', 'n', 'a', 'l', '\0'};
  27          char test[11] = {'1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '\0'};
  28          
  29          // Arrays to save time intervals between each user press
  30          unsigned int time_between_chars_typed_userA[10];
  31          unsigned int time_between_chars_typed_userB[10];
  32          unsigned int time_between_chars_typed_recognize[10];
  33          
  34          
  35          unsigned char trials_num = 5; // # of entries needed to be entered by current user
  36          
  37          // state_bit
  38          // 0 :userA training phase
  39          // 1 :means userB training phase
  40          // 2 :means entering test phase  
  41          unsigned char states_bit = 0;
  42          
  43            
  44          void main (void) {
  45   1        /*Note : timer takes 135 micro seconds to overflow*/
  46   1        
  47   1        
  48   1        /*------------------------------------------------
  49   1          Setup the timer 1 to start in mode 2 with auto reload value of 0.
  50   1        ------------------------------------------------*/
  51   1                  // Setting the global interrupt
  52   1        SCON = 0x50;    // SCON:  mode 1, 8-bit UART, enable receiver
  53   1        TMOD |= 0x20;   // TMOD:  timer 1, mode 2, 16-bit 
  54   1        TH1 = 0x00;     // TH1:   Seting timer auto reload value to 0
C51 COMPILER V9.59.0.0   MAIN                                                              12/07/2018 00:57:42 PAGE 2   

  55   1        TR1 = 1;        // TR1:   timer 1 run
  56   1        TI = 1;         // TI:    set TI to send first char of UART
  57   1        IT1 = 0;
  58   1        //PCON |= 0x80;
  59   1        
  60   1        /*--------------------------------------
  61   1          Enable interrupts for timer 1.
  62   1        --------------------------------------*/
  63   1        ET1 = 1;        // Setting Timer 1 interrupt
  64   1        EA = 1; 
  65   1      
  66   1      
  67   1        // Program Logic follows
  68   1        printf("User A, Please enter the following Sequance 5 times:\n '1234567890' \n");
  69   1        
  70   1        while (1) {
  71   2          
  72   2          char x = _getkey();
  73   2          printf("#%d Entry", trials_num);
  74   2          
  75   2          if(states_bit == 0 && trials_num == 0){
  76   3            // Just got last entry by User A @(Training Session)
  77   3            trials_num = 5;   // Reset # of needed entries for (Training Session) by User B
  78   3            states_bit = 1;   // Set to User B (Training Session) 
  79   3          
  80   3          } else if(states_bit == 1 && trials_num == 0 ) {
  81   3            // Just got last entry by User B @(Training Session)
  82   3            states_bit = 2; // Set to (Test Session)
  83   3            
  84   3          }
  85   2          
  86   2          
  87   2          if (x == test[key_i]) {
  88   3            // a Key was pressed Logic
  89   3            if (key_i != 0 && states_bit == 0) {
  90   4              time_between_chars_typed_userA[key_i-1] = T1_ISR_count;
  91   4              printf("%u\n", time_between_chars_typed_userA[key_i-1]);
  92   4            
  93   4            } else if(key_i != 0 && states_bit == 1) {
  94   4              time_between_chars_typed_userB[key_i-1] = T1_ISR_count;
  95   4              printf("%u\n", time_between_chars_typed_userB[key_i-1]);  
  96   4              
  97   4            } else {
  98   4              time_between_chars_typed_recognize[key_i-1] = T1_ISR_count;
  99   4              printf("%u\n", time_between_chars_typed_recognize[key_i-1]);  
 100   4              
 101   4            }       
 102   3            key_i++;
 103   3            T1_ISR_count = 0;       
 104   3        
 105   3          } else { 
 106   3            printf("Another key pressed; Repeat from the beginning of the sequence.\n");
 107   3            key_i = 0;
 108   3            // TODO does the counter reset in this case?
 109   3          }
 110   2          
 111   2          
 112   2          if (key_i == 10) {
 113   3            // Sequence entered correctly Logic
 114   3            key_i = 0;
 115   3            
 116   3            if(states_bit == 0 || states_bit == 1)
C51 COMPILER V9.59.0.0   MAIN                                                              12/07/2018 00:57:42 PAGE 3   

 117   3              // It is a (Training Session)
 118   3              trials_num --;
 119   3            
 120   3            if(states_bit == 0 && trials_num == 0){
 121   4              printf("User A finished training phase\n");
 122   4              printf("Now User B, Please enter the following Sequance 5 times:\n '1234567890' \n");
 123   4              
 124   4            } else if(states_bit == 1 && trials_num == 0){
 125   4              printf("User B finished training phase\n");
 126   4              printf("Now any user enters 1234567890 and wait for detection\n");
 127   4          
 128   4            } else if(states_bit == 2) {
 129   4              // Detection Logic
 130   4              unsigned char feature_i = 0;
 131   4              unsigned short error_sum = 0;
 132   4              //unsigned short error_sum_B = 0;
 133   4              
 134   4              for(; feature_i < 10; feature_i++) {
 135   5                //error_sum_A += (time_between_chars_typed_recognize[feature_i] - time_between_chars_typed_userA[feat
             -ure_i]);
 136   5                //error_sum_B += (time_between_chars_typed_recognize[feature_i] - time_between_chars_typed_userB[feat
             -ure_i]);
 137   5                error_sum += (time_between_chars_typed_recognize[feature_i] - time_between_chars_typed_userA[feature_
             -i]);
 138   5                error_sum -= (time_between_chars_typed_recognize[feature_i] - time_between_chars_typed_userB[feature_
             -i]);
 139   5              }
 140   4              
 141   4              if(error_sum > 0) {
 142   5                printf("This was probably User B.");
 143   5                
 144   5              } else if (error_sum < 0) {
 145   5                printf("This was probably User A.");
 146   5                
 147   5              } else {
 148   5                printf("Oh! no I can not take a guess!");
 149   5      
 150   5              }
 151   4              
 152   4              /*
 153   4              if(error_sum_A < error_sum_B) {
 154   4                printf("This was probably User A.");
 155   4                
 156   4              } else if(error_sum_B < error_sum_A) {
 157   4                printf("This was probably User B.");
 158   4                
 159   4              } else {
 160   4                printf("Oh! no I can not take a guess!");
 161   4                
 162   4              }
 163   4              */
 164   4              
 165   4            }
 166   3            
 167   3          }
 168   2        }
 169   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    471    ----
   CONSTANT SIZE    =    423    ----
C51 COMPILER V9.59.0.0   MAIN                                                              12/07/2018 00:57:42 PAGE 4   

   XDATA SIZE       =     88    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     77       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
